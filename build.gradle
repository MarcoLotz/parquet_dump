plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "org.openapi.generator" version "6.0.1"
}

group = 'com.marcolotz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    swagger_annotations_version = "1.6.6"
    hadoop_version = "2.10.2"
    parquet_version = "1.12.3"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Configuration Validation:
    implementation 'javax.validation:validation-api'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'

    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Async logging to avoid I/O bottlenecks when benchmarking serialization
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-log4j2'
    // High Performance ring queue:
    implementation 'com.lmax:disruptor:3.4.4'

    // Open API:
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.3'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.2'

    // Apache Parquet related:
    implementation group: 'org.apache.parquet', name: 'parquet-avro', version: parquet_version
    implementation group: 'org.apache.parquet', name: 'parquet-hadoop', version: parquet_version
    implementation group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoop_version
    implementation group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoop_version

    // Encryption:
    implementation 'at.favre.lib:hkdf:1.1.0'

    // Prod version DB
    runtimeOnly "com.oracle.database.jdbc:ojdbc8"

    // Test dependencies:
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2' // DB used for testing
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

// Fix to have only log4j2 installed
configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: 'slf4j-reload4j'
    all*.exclude module: 'servlet-api'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/* Generate Server Code from OpenAPI definition */
def commandApiPath = "$rootDir/src/main/resources/api/command_ingestion.yaml".toString()

/* server code configuration */
task commandApiServerCode(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = commandApiPath
    outputDir = "$buildDir/generated".toString()

    groupId = "$project.group"
    id = "$project.name-java-server"
    version = "$project.version"
    apiPackage = "com.marcolotz.db2parquet.api"
    modelPackage = "com.marcolotz.db2parquet.api.model"
    enablePostProcessFile = true
    skipOverwrite = false
    configOptions = [configPackage       : "com.marcolotz.db2parquet.api.config",
                     java8               : "true",
                     dateLibrary         : "java8",
                     serializationLibrary: "jackson",
                     library             : "spring-boot",
                     useBeanValidation   : "false",
                     interfaceOnly       : "true",
                     serializableModel   : "true",
                     useTags             : "true"]
}

// code will be generated during compilation
compileJava.dependsOn(commandApiServerCode)

test {
    minHeapSize = "2g" // initial heap size
    maxHeapSize = "2g" // maximum heap size
    //jvmArgs '-XX:MaxPermSize=2g' // mem argument for the test JVM - deprecated in 8.0
}

// attach the generated folder as source for this project
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}