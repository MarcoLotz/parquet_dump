/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.marcolotz.db2parquet.api;

import com.marcolotz.db2parquet.api.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-12T13:25:59.525740+02:00[Europe/Zurich]")
@Tag(name = "Trigger", description = "the Trigger API")
public interface TriggerApi {

    /**
     * PUT /v1/trigger : Starts an ingestion on the configured database
     *
     * @return Ingestion succeeded (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "ingestData",
        summary = "Starts an ingestion on the configured database",
        tags = { "trigger" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ingestion succeeded"),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/trigger",
        produces = { "application/json" }
    )
    java.util.concurrent.CompletableFuture<ResponseEntity<Void>> ingestData(
        
    );

}
